/**********************************************************************************
 *          Project
 *    __ _
 *   / _| |__   __ _       ___  ___ _ ____   _____ _ __
 *  | |_| '_ \ / _` | ___ / __|/ _ \ '__\ \ / / _ \ '__|
 *  |  _| | | | (_| ||___|\__ \  __/ |   \ V /  __/ |
 *  |_| |_| |_|\__, |     |___/\___|_|    \_/ \___|_|
 *                |_|
 *
 * MIT License
 *
 * Copyright (c) 2011-2025 FreeHackQuest <freehackquest@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 ***********************************************************************************/

// automaticly generated by models.json

#include "model_public_event.h"

#include <algorithm>
#include <iostream>
#include <wsjcpp_core.h>

ModelPublicEvent::ModelPublicEvent() {
  TAG = "ModelPublicEvent";
  m_nLocalId = 0;
  m_sUuid = "";
  m_sType = "";
  m_sMessage = "";
  m_sMeta = "";
  m_nDateTime = 0;
}

ModelPublicEvent::~ModelPublicEvent() {
  //
}

int ModelPublicEvent::getLocalId() const { return m_nLocalId; }
void ModelPublicEvent::setLocalId(int nVal) { m_nLocalId = nVal; }

const std::string &ModelPublicEvent::getUuid() const { return m_sUuid; }
void ModelPublicEvent::setUuid(const std::string &sVal) {
  m_sUuid = sVal;
  m_sUuid_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelPublicEvent::hasInUuid_lowercase(const std::string &sVal) {
  return m_sUuid_lowercase.find(sVal) != std::string::npos;
}

const std::string &ModelPublicEvent::getType() const { return m_sType; }
void ModelPublicEvent::setType(const std::string &sVal) {
  m_sType = sVal;
  m_sType_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelPublicEvent::hasInType_lowercase(const std::string &sVal) {
  return m_sType_lowercase.find(sVal) != std::string::npos;
}

const std::string &ModelPublicEvent::getMessage() const { return m_sMessage; }
void ModelPublicEvent::setMessage(const std::string &sVal) {
  m_sMessage = sVal;
  m_sMessage_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelPublicEvent::hasInMessage_lowercase(const std::string &sVal) {
  return m_sMessage_lowercase.find(sVal) != std::string::npos;
}

const std::string &ModelPublicEvent::getMeta() const { return m_sMeta; }
void ModelPublicEvent::setMeta(const std::string &sVal) {
  m_sMeta = sVal;
  m_sMeta_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelPublicEvent::hasInMeta_lowercase(const std::string &sVal) {
  return m_sMeta_lowercase.find(sVal) != std::string::npos;
}

long ModelPublicEvent::getDateTime() const { return m_nDateTime; }
void ModelPublicEvent::setDateTime(long nVal) { m_nDateTime = nVal; }

void ModelPublicEvent::copy(const ModelPublicEvent &m) {
  this->setLocalId(m.getLocalId());
  this->setUuid(m.getUuid());
  this->setType(m.getType());
  this->setMessage(m.getMessage());
  this->setMeta(m.getMeta());
  this->setDateTime(m.getDateTime());
}

ModelPublicEvent *ModelPublicEvent::clone() const {
  ModelPublicEvent *pModel = new ModelPublicEvent();
  pModel->copy(*this);
  return pModel;
}

nlohmann::json ModelPublicEvent::toJson() {
  nlohmann::json jsonRet;
  jsonRet["id"] = m_nLocalId;
  jsonRet["uuid"] = m_sUuid;
  jsonRet["type"] = m_sType;
  jsonRet["message"] = m_sMessage;
  jsonRet["meta"] = m_sMeta;
  jsonRet["dt"] = m_nDateTime;
  return jsonRet;
}
