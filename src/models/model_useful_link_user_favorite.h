/**********************************************************************************
 *          Project
 *    __ _
 *   / _| |__   __ _       ___  ___ _ ____   _____ _ __
 *  | |_| '_ \ / _` | ___ / __|/ _ \ '__\ \ / / _ \ '__|
 *  |  _| | | | (_| ||___|\__ \  __/ |   \ V /  __/ |
 *  |_| |_| |_|\__, |     |___/\___|_|    \_/ \___|_|
 *                |_|
 *
 * MIT License
 *
 * Copyright (c) 2011-2025 FreeHackQuest <freehackquest@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 ***********************************************************************************/

// automaticly generated by models.json

#pragma once

#include <json.hpp>
#include <string>
#include <validators.h>

class ModelUsefulLinkUserFavorite {
public:
  ModelUsefulLinkUserFavorite();
  ~ModelUsefulLinkUserFavorite();

  int getLocalId() const;
  void setLocalId(int nVal);

  const std::string &getUsefulLinkUuid() const;
  void setUsefulLinkUuid(const std::string &sVal);
  bool hasInUsefulLinkUuid_lowercase(const std::string &sVal);

  int getUsefulLinkId() const;
  void setUsefulLinkId(int nVal);

  const std::string &getUserUuid() const;
  void setUserUuid(const std::string &sVal);
  bool hasInUserUuid_lowercase(const std::string &sVal);

  int getUserId() const;
  void setUserId(int nVal);

  long getDateTime() const;
  void setDateTime(long nVal);

  void copy(const ModelUsefulLinkUserFavorite &m);
  ModelUsefulLinkUserFavorite *clone() const;
  nlohmann::json toJson();

private:
  std::string TAG;
  int m_nLocalId;
  std::string m_sUsefulLinkUuid;
  std::string m_sUsefulLinkUuid_lowercase;
  int m_nUsefulLinkId;
  std::string m_sUserUuid;
  std::string m_sUserUuid_lowercase;
  int m_nUserId;
  long m_nDateTime;
};
