/**********************************************************************************
 *          Project
 *    __ _
 *   / _| |__   __ _       ___  ___ _ ____   _____ _ __
 *  | |_| '_ \ / _` | ___ / __|/ _ \ '__\ \ / / _ \ '__|
 *  |  _| | | | (_| ||___|\__ \  __/ |   \ V /  __/ |
 *  |_| |_| |_|\__, |     |___/\___|_|    \_/ \___|_|
 *                |_|
 *
 * MIT License
 *
 * Copyright (c) 2011-2025 FreeHackQuest <freehackquest@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 ***********************************************************************************/

// automaticly generated by models.json

#include "model_useful_link_tag.h"

#include <algorithm>
#include <iostream>
#include <wsjcpp_core.h>

ModelUsefulLinkTag::ModelUsefulLinkTag() {
  TAG = "ModelUsefulLinkTag";
  m_nLocalId = 0;
  m_sUsefulLinkUuid = "";
  m_nUsefulLinkId = 0;
  m_sTagValue = "";
}

ModelUsefulLinkTag::~ModelUsefulLinkTag() {
  //
}

int ModelUsefulLinkTag::getLocalId() const { return m_nLocalId; }
void ModelUsefulLinkTag::setLocalId(int nVal) { m_nLocalId = nVal; }

const std::string &ModelUsefulLinkTag::getUsefulLinkUuid() const { return m_sUsefulLinkUuid; }
void ModelUsefulLinkTag::setUsefulLinkUuid(const std::string &sVal) {
  m_sUsefulLinkUuid = sVal;
  m_sUsefulLinkUuid_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLinkTag::hasInUsefulLinkUuid_lowercase(const std::string &sVal) {
  return m_sUsefulLinkUuid_lowercase.find(sVal) != std::string::npos;
}

int ModelUsefulLinkTag::getUsefulLinkId() const { return m_nUsefulLinkId; }
void ModelUsefulLinkTag::setUsefulLinkId(int nVal) { m_nUsefulLinkId = nVal; }

const std::string &ModelUsefulLinkTag::getTagValue() const { return m_sTagValue; }
void ModelUsefulLinkTag::setTagValue(const std::string &sVal) {
  m_sTagValue = sVal;
  m_sTagValue_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLinkTag::hasInTagValue_lowercase(const std::string &sVal) {
  return m_sTagValue_lowercase.find(sVal) != std::string::npos;
}

void ModelUsefulLinkTag::copy(const ModelUsefulLinkTag &m) {
  this->setLocalId(m.getLocalId());
  this->setUsefulLinkUuid(m.getUsefulLinkUuid());
  this->setUsefulLinkId(m.getUsefulLinkId());
  this->setTagValue(m.getTagValue());
}

ModelUsefulLinkTag *ModelUsefulLinkTag::clone() const {
  ModelUsefulLinkTag *pModel = new ModelUsefulLinkTag();
  pModel->copy(*this);
  return pModel;
}

nlohmann::json ModelUsefulLinkTag::toJson() {
  nlohmann::json jsonRet;
  jsonRet["id"] = m_nLocalId;
  jsonRet["usefullinkuuid"] = m_sUsefulLinkUuid;
  jsonRet["usefullinkid"] = m_nUsefulLinkId;
  jsonRet["tagvalue"] = m_sTagValue;
  return jsonRet;
}
