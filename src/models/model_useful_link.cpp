/**********************************************************************************
 *          Project
 *    __ _
 *   / _| |__   __ _       ___  ___ _ ____   _____ _ __
 *  | |_| '_ \ / _` | ___ / __|/ _ \ '__\ \ / / _ \ '__|
 *  |  _| | | | (_| ||___|\__ \  __/ |   \ V /  __/ |
 *  |_| |_| |_|\__, |     |___/\___|_|    \_/ \___|_|
 *                |_|
 *
 * MIT License
 *
 * Copyright (c) 2011-2025 FreeHackQuest <freehackquest@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 ***********************************************************************************/

// automaticly generated by models.json

#include "model_useful_link.h"

#include <algorithm>
#include <iostream>
#include <wsjcpp_core.h>

ModelUsefulLink::ModelUsefulLink() {
  TAG = "ModelUsefulLink";
  m_nLocalId = 0;
  m_sUuid = "";
  m_sUrl = "";
  m_sDescription = "";
  m_sAuthor = "";
  m_nDateTimeUpdated = 0;
  m_nUserFavorites = 0;
  m_nUserClicks = 0;
  m_nUserComments = 0;
  m_sTags = "";
}

ModelUsefulLink::~ModelUsefulLink() {
  //
}

int ModelUsefulLink::getLocalId() const { return m_nLocalId; }
void ModelUsefulLink::setLocalId(int nVal) { m_nLocalId = nVal; }

const std::string &ModelUsefulLink::getUuid() const { return m_sUuid; }
void ModelUsefulLink::setUuid(const std::string &sVal) {
  m_sUuid = sVal;
  m_sUuid_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLink::hasInUuid_lowercase(const std::string &sVal) {
  return m_sUuid_lowercase.find(sVal) != std::string::npos;
}

const std::string &ModelUsefulLink::getUrl() const { return m_sUrl; }
void ModelUsefulLink::setUrl(const std::string &sVal) {
  m_sUrl = sVal;
  m_sUrl_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLink::hasInUrl_lowercase(const std::string &sVal) {
  return m_sUrl_lowercase.find(sVal) != std::string::npos;
}

const std::string &ModelUsefulLink::getDescription() const { return m_sDescription; }
void ModelUsefulLink::setDescription(const std::string &sVal) {
  m_sDescription = sVal;
  m_sDescription_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLink::hasInDescription_lowercase(const std::string &sVal) {
  return m_sDescription_lowercase.find(sVal) != std::string::npos;
}

const std::string &ModelUsefulLink::getAuthor() const { return m_sAuthor; }
void ModelUsefulLink::setAuthor(const std::string &sVal) {
  m_sAuthor = sVal;
  m_sAuthor_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLink::hasInAuthor_lowercase(const std::string &sVal) {
  return m_sAuthor_lowercase.find(sVal) != std::string::npos;
}

long ModelUsefulLink::getDateTimeUpdated() const { return m_nDateTimeUpdated; }
void ModelUsefulLink::setDateTimeUpdated(long nVal) { m_nDateTimeUpdated = nVal; }

int ModelUsefulLink::getUserFavorites() const { return m_nUserFavorites; }
void ModelUsefulLink::setUserFavorites(int nVal) { m_nUserFavorites = nVal; }

int ModelUsefulLink::getUserClicks() const { return m_nUserClicks; }
void ModelUsefulLink::setUserClicks(int nVal) { m_nUserClicks = nVal; }

int ModelUsefulLink::getUserComments() const { return m_nUserComments; }
void ModelUsefulLink::setUserComments(int nVal) { m_nUserComments = nVal; }

const std::string &ModelUsefulLink::getTags() const { return m_sTags; }
void ModelUsefulLink::setTags(const std::string &sVal) {
  m_sTags = sVal;
  m_sTags_lowercase = WsjcppCore::toLower(sVal);
}
bool ModelUsefulLink::hasInTags_lowercase(const std::string &sVal) {
  return m_sTags_lowercase.find(sVal) != std::string::npos;
}

void ModelUsefulLink::copy(const ModelUsefulLink &m) {
  this->setLocalId(m.getLocalId());
  this->setUuid(m.getUuid());
  this->setUrl(m.getUrl());
  this->setDescription(m.getDescription());
  this->setAuthor(m.getAuthor());
  this->setDateTimeUpdated(m.getDateTimeUpdated());
  this->setUserFavorites(m.getUserFavorites());
  this->setUserClicks(m.getUserClicks());
  this->setUserComments(m.getUserComments());
  this->setTags(m.getTags());
}

ModelUsefulLink *ModelUsefulLink::clone() const {
  ModelUsefulLink *pModel = new ModelUsefulLink();
  pModel->copy(*this);
  return pModel;
}

nlohmann::json ModelUsefulLink::toJson() {
  nlohmann::json jsonRet;
  jsonRet["id"] = m_nLocalId;
  jsonRet["uuid"] = m_sUuid;
  jsonRet["url"] = m_sUrl;
  jsonRet["description"] = m_sDescription;
  jsonRet["author"] = m_sAuthor;
  jsonRet["dt"] = m_nDateTimeUpdated;
  jsonRet["user_favorites"] = m_nUserFavorites;
  jsonRet["user_clicks"] = m_nUserClicks;
  jsonRet["user_comments"] = m_nUserComments;
  jsonRet["tags"] = m_sTags;
  return jsonRet;
}
